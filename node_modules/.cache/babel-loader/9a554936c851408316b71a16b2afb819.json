{"remainingRequest":"/Users/justina/git/vue-d3-js/node_modules/babel-loader/lib/index.js!/Users/justina/git/vue-d3-js/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/justina/git/vue-d3-js/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/justina/git/vue-d3-js/src/views/ChartJs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/justina/git/vue-d3-js/src/views/ChartJs.vue","mtime":1537479043621},{"path":"/Users/justina/git/vue-d3-js/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-d3-js/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justina/git/vue-d3-js/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-d3-js/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LineChartJs from '../components/LineChartJs.vue';\nimport axios from 'axios';\nimport _ from 'lodash';\nexport default {\n  name: 'ChartJsLineChart',\n  components: {\n    LineChartJs: LineChartJs\n  },\n  methods: {\n    /**\n     * Get data method uses axios to get data via a HTTP API Endpoint\n     */\n    getData: function getData() {\n      var _this = this;\n\n      axios.get('https://api.coindesk.com/v1/bpi/historical/close.json') // HTTP GET Request\n      .then(function (response) {\n        // Parse the response data into a format that highcharts understands\n        _this.chartOptions.series[0].data = _this.parseData(response.data['bpi']); // Assign the last updated time\n\n        _this.updated = response.data.time.updated; // Assign the disclaimer text\n\n        _this.disclaimer = response.data.disclaimer;\n      }).catch(function (error) {\n        // Executes if an error occurs if code is not >= 200 && < 300\n        _this.showError = true;\n        _this.error = error;\n      }).finally(function () {\n        return _this.loading = false;\n      }); // Always occurs even if there is an error\n    }\n  },\n  parseData: function parseData(response) {// return _.map(response, (value, key) => [moment(key, 'YYYY-MM-DD').valueOf(), value]);\n  },\n\n  /**\n   * The data object for the Vue instance.\n   * Must declare all root-level reactive properties upfront to be reactive.\n   */\n  data: function data() {\n    return {\n      loading: true,\n      updated: null,\n      showError: false,\n      error: null,\n      chartData: {\n        datasets: [{\n          label: 'Bitcoin (BTC/USD)',\n          backgroundColor: '#f7931a',\n          borderColor: '#f7931a',\n          fill: false,\n          data: null\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              callback: function callback(value) {\n                return '$' + value;\n              }\n            }\n          }]\n        }\n      }\n    };\n  },\n\n  /**\n   * Called after the instance has been mounted\n   */\n  mounted: function mounted() {\n    this.getData();\n  }\n};",{"version":3,"sources":["ChartJs.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAA,WAAA,MAAA,+BAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA,eAAA;AACA,QAAA,kBADA;AAEA,cAAA;AACA;AADA,GAFA;AAKA,WAAA;AACA;;;AAMA,WAPA,qBAOA;AAAA;;AACA,YACA,GADA,CACA,uDADA,EACA;AADA,OAEA,IAFA,CAEA,oBAAA;AACA;AACA,cAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,GAAA,MAAA,SAAA,CAAA,SAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAFA,CAIA;;AACA,cAAA,OAAA,GAAA,SAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CALA,CAOA;;AACA,cAAA,UAAA,GAAA,SAAA,IAAA,CAAA,UAAA;AACA,OAXA,EAYA,KAZA,CAYA,iBAAA;AAAA;AACA,cAAA,SAAA,GAAA,IAAA;AACA,cAAA,KAAA,GAAA,KAAA;AACA,OAfA,EAgBA,OAhBA,CAgBA;AAAA,eAAA,MAAA,OAAA,GAAA,KAAA;AAAA,OAhBA,EADA,CAiBA;AACA;AAzBA,GALA;AAiCA,WAjCA,qBAiCA,QAjCA,EAiCA,CACA;AACA,GAnCA;;AAqCA;;;;AAIA,MAzCA,kBAyCA;AACA,WAAA;AACA,eAAA,IADA;AAEA,eAAA,IAFA;AAGA,iBAAA,KAHA;AAIA,aAAA,IAJA;AAKA,iBAAA;AACA,kBAAA,CACA;AACA,iBAAA,mBADA;AAEA,2BAAA,SAFA;AAGA,uBAAA,SAHA;AAIA,gBAAA,KAJA;AAKA,gBAAA;AALA,SADA;AADA,OALA;AAgBA,oBAAA;AACA,oBAAA,IADA;AAEA,6BAAA,KAFA;AAGA,kBAAA;AACA,mBAAA;AADA,SAHA;AAMA,gBAAA;AACA,iBAAA,CACA;AACA,mBAAA;AACA,wBAAA,kBAAA,KAAA;AAAA,uBAAA,MAAA,KAAA;AAAA;AADA;AADA,WADA;AADA;AANA;AAhBA,KAAA;AAiCA,GA3EA;;AA6EA;;;AAGA,SAhFA,qBAgFA;AACA,SAAA,OAAA;AACA;AAlFA,CAAA","sourcesContent":["<template>\n  <div class=\"charts\">\n    <h1 class=\"animated bounceInRight\">Bitcoin Price Index History</h1>\n\n    <div class=\"loading animated bounceInRight\" v-if=\"loading\">\n      <p>Loading...</p>\n    </div>\n\n    <div class=\"error animated bounceInRight\" v-else-if=\"showError\">\n      <p class=\"big\">üôÅ</p>\n      <p>Error accessing the API: {{ error.message }}</p>\n      <p v-if=\"error.response\">Response: {{ error.response }}</p>\n    </div>\n\n    <div class=\"animated bounceInRight\" v-else>\n\n      <!-- Vue Component -->\n      <LineChartJs :data=\"chartData\" :options=\"chartOptions\"/>\n\n      <p class=\"updated\">Updated: {{ updated }}</p>\n      <p class=\"box disclaimer\">{{ disclaimer }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\n  import LineChartJs from '../components/LineChartJs.vue';\n  import axios from 'axios';\n  import _ from 'lodash';\n\n  export default {\n    name: 'ChartJsLineChart',\n    components: {\n      LineChartJs,\n    },\n    methods: {\n      /**\n       * Get data method uses axios to get data via a HTTP API Endpoint\n       */\n\n\n\n      getData() {\n        axios\n          .get('https://api.coindesk.com/v1/bpi/historical/close.json') // HTTP GET Request\n          .then(response => {\n            // Parse the response data into a format that highcharts understands\n            this.chartOptions.series[0].data = this.parseData(response.data['bpi']);\n\n            // Assign the last updated time\n            this.updated = response.data.time.updated;\n\n            // Assign the disclaimer text\n            this.disclaimer = response.data.disclaimer;\n          })\n          .catch(error => { // Executes if an error occurs if code is not >= 200 && < 300\n            this.showError = true;\n            this.error     = error;\n          })\n          .finally(() => this.loading = false); // Always occurs even if there is an error\n      },\n    },\n\n     parseData(response) {\n        // return _.map(response, (value, key) => [moment(key, 'YYYY-MM-DD').valueOf(), value]);\n      },\n\n    /**\n     * The data object for the Vue instance.\n     * Must declare all root-level reactive properties upfront to be reactive.\n     */\n    data() {\n      return {\n        loading: true,\n        updated: null,\n        showError: false,\n        error: null,\n        chartData: {\n          datasets: [\n            {\n              label: 'Bitcoin (BTC/USD)',\n              backgroundColor: '#f7931a',\n              borderColor: '#f7931a',\n              fill: false,\n              data: null,\n            },\n          ],\n        },\n        chartOptions: {\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            enabled: true,\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  callback: (value) => '$' + value,\n                },\n              },\n            ],\n          },\n        },\n      };\n    },\n\n    /**\n     * Called after the instance has been mounted\n     */\n    mounted() {\n      this.getData();\n    },\n  };\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/views"}]}