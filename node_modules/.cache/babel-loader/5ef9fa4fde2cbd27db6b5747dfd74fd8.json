{"remainingRequest":"/Users/justina/git/vue-highcharts-example/node_modules/babel-loader/lib/index.js!/Users/justina/git/vue-highcharts-example/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/justina/git/vue-highcharts-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/justina/git/vue-highcharts-example/src/views/HighCharts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/justina/git/vue-highcharts-example/src/views/HighCharts.vue","mtime":1537442303222},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as moment from 'moment';\nimport axios from 'axios';\nimport _ from 'lodash';\nexport default {\n  name: 'HighChartLineChart',\n  methods: {\n    /**\n     * Get data method uses axios to get data via a HTTP API Endpoint\n     */\n    getData: function getData() {\n      var _this = this;\n\n      axios.get('https://api.coindesk.com/v1/bpi/historical/close.json') // HTTP GET Request\n      .then(function (response) {\n        // Parse the response data into a format that highcharts understands\n        _this.chartOptions.series[0].data = _this.parseData(response.data['bpi']); // Assign the last updated time\n\n        _this.updated = response.data.time.updated; // Assign the disclaimer text\n\n        _this.disclaimer = response.data.disclaimer;\n      }).catch(function (error) {\n        // Executes if an error occurs if code is not >= 200 && < 300\n        _this.showError = true;\n        _this.error = error;\n      }).finally(function () {\n        return _this.loading = false;\n      }); // Always occurs even if there is an error\n    },\n\n    /**\n     * Parse data function\n     */\n    parseData: function parseData(response) {\n      return _.map(response, function (value, key) {\n        return [moment(key, 'YYYY-MM-DD').valueOf(), value];\n      });\n    }\n  },\n\n  /**\n   * The data object for the Vue instance.\n   * Must declare all root-level reactive properties upfront to be reactive.\n   */\n  data: function data() {\n    return {\n      loading: true,\n      updated: null,\n      showError: false,\n      error: null,\n      chartOptions: {\n        title: {\n          text: ''\n        },\n        series: [{\n          name: 'Bitcoin (BTC/USD)',\n          type: 'line',\n          color: '#f7931a',\n          data: null\n        }],\n        navigator: {\n          enabled: false\n        },\n        scrollbar: {\n          enabled: false\n        },\n        rangeSelector: {\n          enabled: false\n        }\n      }\n    };\n  },\n\n  /**\n   * Called after the instance has been mounted\n   */\n  mounted: function mounted() {\n    this.getData();\n  }\n};",{"version":3,"sources":["HighCharts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAA,KAAA,MAAA,MAAA,QAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA,eAAA;AACA,QAAA,oBADA;AAEA,WAAA;AACA;;;AAGA,WAJA,qBAIA;AAAA;;AACA,YACA,GADA,CACA,uDADA,EACA;AADA,OAEA,IAFA,CAEA,oBAAA;AAEA;AACA,cAAA,YAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,GAAA,MAAA,SAAA,CAAA,SAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAHA,CAKA;;AACA,cAAA,OAAA,GAAA,SAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CANA,CAQA;;AACA,cAAA,UAAA,GAAA,SAAA,IAAA,CAAA,UAAA;AACA,OAZA,EAaA,KAbA,CAaA,iBAAA;AAAA;AACA,cAAA,SAAA,GAAA,IAAA;AACA,cAAA,KAAA,GAAA,KAAA;AACA,OAhBA,EAiBA,OAjBA,CAiBA;AAAA,eAAA,MAAA,OAAA,GAAA,KAAA;AAAA,OAjBA,EADA,CAkBA;AACA,KAvBA;;AAwBA;;;AAGA,aA3BA,qBA2BA,QA3BA,EA2BA;AACA,aAAA,EAAA,GAAA,CAAA,QAAA,EAAA,UAAA,KAAA,EAAA,GAAA;AAAA,eAAA,CAAA,OAAA,GAAA,EAAA,YAAA,EAAA,OAAA,EAAA,EAAA,KAAA,CAAA;AAAA,OAAA,CAAA;AACA;AA7BA,GAFA;;AAkCA;;;;AAIA,MAtCA,kBAsCA;AACA,WAAA;AACA,eAAA,IADA;AAEA,eAAA,IAFA;AAGA,iBAAA,KAHA;AAIA,aAAA,IAJA;AAKA,oBAAA;AACA,eAAA;AACA,gBAAA;AADA,SADA;AAIA,gBAAA,CACA;AACA,gBAAA,mBADA;AAEA,gBAAA,MAFA;AAGA,iBAAA,SAHA;AAIA,gBAAA;AAJA,SADA,CAJA;AAYA,mBAAA;AACA,mBAAA;AADA,SAZA;AAeA,mBAAA;AACA,mBAAA;AADA,SAfA;AAkBA,uBAAA;AACA,mBAAA;AADA;AAlBA;AALA,KAAA;AA4BA,GAnEA;;AAqEA;;;AAGA,SAxEA,qBAwEA;AACA,SAAA,OAAA;AACA;AA1EA,CAAA","sourcesContent":["<template>\n  <div class=\"charts\">\n    <h1 class=\"animated bounceInRight\">Bitcoin Price Index History</h1>\n\n    <div class=\"loading animated bounceInRight\" v-if=\"loading\">\n      <p>Loading...</p>\n    </div>\n\n    <div class=\"error animated bounceInRight\" v-else-if=\"showError\">\n      <p class=\"big\">üôÅ</p>\n      <p>Error accessing the API: {{ error.message }}</p>\n      <p v-if=\"error.response\">Response: {{ error.response }}</p>\n    </div>\n\n    <div class=\"animated bounceInRight\" v-else>\n\n      <!-- Vue Component -->\n      <highcharts :constructor-type=\"'stockChart'\" :options=\"chartOptions\"></highcharts>\n\n      <p class=\"updated\">Updated: {{ updated }}</p>\n      <p class=\"box disclaimer\">{{ disclaimer }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\n  import * as moment from 'moment';\n  import axios from 'axios';\n  import _ from 'lodash';\n\n  export default {\n    name: 'HighChartLineChart',\n    methods: {\n      /**\n       * Get data method uses axios to get data via a HTTP API Endpoint\n       */\n      getData() {\n        axios\n          .get('https://api.coindesk.com/v1/bpi/historical/close.json') // HTTP GET Request\n          .then(response => {\n\n            // Parse the response data into a format that highcharts understands\n            this.chartOptions.series[0].data = this.parseData(response.data['bpi']);\n\n            // Assign the last updated time\n            this.updated = response.data.time.updated;\n\n            // Assign the disclaimer text\n            this.disclaimer = response.data.disclaimer;\n          })\n          .catch(error => { // Executes if an error occurs if code is not >= 200 && < 300\n            this.showError = true;\n            this.error     = error;\n          })\n          .finally(() => this.loading = false); // Always occurs even if there is an error\n      },\n      /**\n       * Parse data function\n       */\n      parseData(response) {\n        return _.map(response, (value, key) => [moment(key, 'YYYY-MM-DD').valueOf(), value]);\n      },\n    },\n\n    /**\n     * The data object for the Vue instance.\n     * Must declare all root-level reactive properties upfront to be reactive.\n     */\n    data() {\n      return {\n        loading: true,\n        updated: null,\n        showError: false,\n        error: null,\n        chartOptions: {\n          title: {\n            text: '',\n          },\n          series: [\n            {\n              name: 'Bitcoin (BTC/USD)',\n              type: 'line',\n              color: '#f7931a',\n              data: null,\n            },\n          ],\n          navigator: {\n            enabled: false,\n          },\n          scrollbar: {\n            enabled: false,\n          },\n          rangeSelector: {\n            enabled: false,\n          },\n        },\n      };\n    },\n\n    /**\n     * Called after the instance has been mounted\n     */\n    mounted() {\n      this.getData();\n    },\n  };\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>"],"sourceRoot":"src/views"}]}