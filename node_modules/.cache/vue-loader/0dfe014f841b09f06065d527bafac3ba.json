{"remainingRequest":"/Users/justina/git/vue-highcharts-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/justina/git/vue-highcharts-example/src/views/ChartJs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/justina/git/vue-highcharts-example/src/views/ChartJs.vue","mtime":1537459701036},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-highcharts-example/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LineChartJs from '../components/LineChartJs.vue';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nexport default {\n  name: 'ChartJsLineChart',\n  components: {\n    LineChartJs,\n  },\n  methods: {\n    /**\n     * Get data method uses axios to get data via a HTTP API Endpoint\n     */\n\n\n\n    getData() {\n      axios\n        .get('https://api.coindesk.com/v1/bpi/historical/close.json') // HTTP GET Request\n        .then(response => {\n          // Parse the response data into a format that highcharts understands\n          this.chartOptions.series[0].data = this.parseData(response.data['bpi']);\n\n          // Assign the last updated time\n          this.updated = response.data.time.updated;\n\n          // Assign the disclaimer text\n          this.disclaimer = response.data.disclaimer;\n        })\n        .catch(error => { // Executes if an error occurs if code is not >= 200 && < 300\n          this.showError = true;\n          this.error     = error;\n        })\n        .finally(() => this.loading = false); // Always occurs even if there is an error\n    },\n  },\n\n   parseData(response) {\n      return _.map(response, (value, key) => [moment(key, 'YYYY-MM-DD').valueOf(), value]);\n    },\n\n  /**\n   * The data object for the Vue instance.\n   * Must declare all root-level reactive properties upfront to be reactive.\n   */\n  data() {\n    return {\n      loading: true,\n      updated: null,\n      showError: false,\n      error: null,\n      chartData: {\n        datasets: [\n          {\n            label: 'Bitcoin (BTC/USD)',\n            backgroundColor: '#f7931a',\n            borderColor: '#f7931a',\n            fill: false,\n            data: null,\n          },\n        ],\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true,\n        },\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                callback: (value) => '$' + value,\n              },\n            },\n          ],\n        },\n      },\n    };\n  },\n\n  /**\n   * Called after the instance has been mounted\n   */\n  mounted() {\n    this.getData();\n  },\n};\n",{"version":3,"sources":["ChartJs.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChartJs.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"charts\">\n    <h1 class=\"animated bounceInRight\">Bitcoin Price Index History</h1>\n\n    <div class=\"loading animated bounceInRight\" v-if=\"loading\">\n      <p>Loading...</p>\n    </div>\n\n    <div class=\"error animated bounceInRight\" v-else-if=\"showError\">\n      <p class=\"big\">üôÅ</p>\n      <p>Error accessing the API: {{ error.message }}</p>\n      <p v-if=\"error.response\">Response: {{ error.response }}</p>\n    </div>\n\n    <div class=\"animated bounceInRight\" v-else>\n\n      <!-- Vue Component -->\n      <LineChartJs :data=\"chartData\" :options=\"chartOptions\"/>\n\n      <p class=\"updated\">Updated: {{ updated }}</p>\n      <p class=\"box disclaimer\">{{ disclaimer }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\n  import LineChartJs from '../components/LineChartJs.vue';\n  import axios from 'axios';\n  import _ from 'lodash';\n\n  export default {\n    name: 'ChartJsLineChart',\n    components: {\n      LineChartJs,\n    },\n    methods: {\n      /**\n       * Get data method uses axios to get data via a HTTP API Endpoint\n       */\n\n\n\n      getData() {\n        axios\n          .get('https://api.coindesk.com/v1/bpi/historical/close.json') // HTTP GET Request\n          .then(response => {\n            // Parse the response data into a format that highcharts understands\n            this.chartOptions.series[0].data = this.parseData(response.data['bpi']);\n\n            // Assign the last updated time\n            this.updated = response.data.time.updated;\n\n            // Assign the disclaimer text\n            this.disclaimer = response.data.disclaimer;\n          })\n          .catch(error => { // Executes if an error occurs if code is not >= 200 && < 300\n            this.showError = true;\n            this.error     = error;\n          })\n          .finally(() => this.loading = false); // Always occurs even if there is an error\n      },\n    },\n\n     parseData(response) {\n        return _.map(response, (value, key) => [moment(key, 'YYYY-MM-DD').valueOf(), value]);\n      },\n\n    /**\n     * The data object for the Vue instance.\n     * Must declare all root-level reactive properties upfront to be reactive.\n     */\n    data() {\n      return {\n        loading: true,\n        updated: null,\n        showError: false,\n        error: null,\n        chartData: {\n          datasets: [\n            {\n              label: 'Bitcoin (BTC/USD)',\n              backgroundColor: '#f7931a',\n              borderColor: '#f7931a',\n              fill: false,\n              data: null,\n            },\n          ],\n        },\n        chartOptions: {\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            enabled: true,\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  callback: (value) => '$' + value,\n                },\n              },\n            ],\n          },\n        },\n      };\n    },\n\n    /**\n     * Called after the instance has been mounted\n     */\n    mounted() {\n      this.getData();\n    },\n  };\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>\n"]}]}