{"remainingRequest":"/Users/justina/git/vue-d3-js/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/justina/git/vue-d3-js/src/views/D3js.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/justina/git/vue-d3-js/src/views/D3js.vue","mtime":1537480479431},{"path":"/Users/justina/git/vue-d3-js/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-d3-js/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/justina/git/vue-d3-js/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/justina/git/vue-d3-js/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport D3js from '../components/D3js.vue';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst data = [99, 71, 78, 25, 36, 92];\n\nexport default {\n  name: 'd3js',\n  components: {\n    D3js,\n  },\n  methods: {\n\n\n\n    // define a method that will be used to get the data from the API\n    getData() {\n      // console.log('testing the getData() call');\n      axios\n        .get('https://repods.io/api/markode/FIFAWorldCup/reports/5818', {\n          headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, PATCH, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"X-Requested-With, content-type, Authorization\"\n          },\n          auth: {\n              username: '908ce8e1-95bc-43b7-a9f3-20512f2851b7',\n              password: ''\n          }\n        }) // HTTP GET Request\n        // .get('https://api.chucknorris.io/jokes/random')\n        .then(response => {\n          // console.log('give me the result', response);\n        })\n        .catch(error => { // Executes if an error occurs if code is not >= 200 && < 300\n\n        })\n        .finally(() => this.loading = false); // Always occurs even if there is an error\n    },\n\n    parseData(response) {\n      // return _.map(response, (value, key) => [moment(key, 'YYYY-MM-DD').valueOf(), value]);\n    },\n\n  },\n  data() {\n    // return the data\n    return {\n    //   devServer:  {\n    //   historyApiFallback: true,\n    //   watchOptions: { aggregateTimeout: 300, poll: 1000 },\n    //   headers: {\n    //     \"Access-Control-Allow-Origin\": \"*\",\n    //     \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, PATCH, OPTIONS\",\n    //     \"Access-Control-Allow-Headers\": \"X-Requested-With, content-type, Authorization\"\n    //   }\n    // }\n  }\n  },\n\n  mounted() {\n    const svg = d3.select(this.$el)\n      .append('svg')\n      .attr('width', 500)\n      .attr('height', 270)\n      .append('g')\n      .attr('transform', 'translate(0, 10)');\n\n    const x = d3.scaleLinear().range([0, 430]);\n    const y = d3.scaleLinear().range([210, 0]);\n\n    d3.axisLeft().scale(x);\n    d3.axisTop().scale(y);\n    x.domain(d3.extent(data, (d, i) => i));\n    y.domain([0, d3.max(data, d => d)]);\n    const createPath = d3.line()\n      .x((d, i) => x(i))\n      .y(d => y(d));\n\n    svg.append('path').attr('d', createPath(data));\n\n    this.getData();\n  },\n\n};\n",{"version":3,"sources":["D3js.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA","file":"D3js.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"d3js\">\n    <D3js/>\n  </div>\n</template>\n\n<script>\n  import D3js from '../components/D3js.vue';\n  import * as d3 from 'd3';\n  import axios from 'axios';\n\n  const data = [99, 71, 78, 25, 36, 92];\n\n  export default {\n    name: 'd3js',\n    components: {\n      D3js,\n    },\n    methods: {\n\n\n\n      // define a method that will be used to get the data from the API\n      getData() {\n        // console.log('testing the getData() call');\n        axios\n          .get('https://repods.io/api/markode/FIFAWorldCup/reports/5818', {\n            headers: {\n              \"Access-Control-Allow-Origin\": \"*\",\n              \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, PATCH, OPTIONS\",\n              \"Access-Control-Allow-Headers\": \"X-Requested-With, content-type, Authorization\"\n            },\n            auth: {\n                username: '908ce8e1-95bc-43b7-a9f3-20512f2851b7',\n                password: ''\n            }\n          }) // HTTP GET Request\n          // .get('https://api.chucknorris.io/jokes/random')\n          .then(response => {\n            // console.log('give me the result', response);\n          })\n          .catch(error => { // Executes if an error occurs if code is not >= 200 && < 300\n\n          })\n          .finally(() => this.loading = false); // Always occurs even if there is an error\n      },\n\n      parseData(response) {\n        // return _.map(response, (value, key) => [moment(key, 'YYYY-MM-DD').valueOf(), value]);\n      },\n\n    },\n    data() {\n      // return the data\n      return {\n      //   devServer:  {\n      //   historyApiFallback: true,\n      //   watchOptions: { aggregateTimeout: 300, poll: 1000 },\n      //   headers: {\n      //     \"Access-Control-Allow-Origin\": \"*\",\n      //     \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, PATCH, OPTIONS\",\n      //     \"Access-Control-Allow-Headers\": \"X-Requested-With, content-type, Authorization\"\n      //   }\n      // }\n    }\n    },\n\n    mounted() {\n      const svg = d3.select(this.$el)\n        .append('svg')\n        .attr('width', 500)\n        .attr('height', 270)\n        .append('g')\n        .attr('transform', 'translate(0, 10)');\n\n      const x = d3.scaleLinear().range([0, 430]);\n      const y = d3.scaleLinear().range([210, 0]);\n\n      d3.axisLeft().scale(x);\n      d3.axisTop().scale(y);\n      x.domain(d3.extent(data, (d, i) => i));\n      y.domain([0, d3.max(data, d => d)]);\n      const createPath = d3.line()\n        .x((d, i) => x(i))\n        .y(d => y(d));\n\n      svg.append('path').attr('d', createPath(data));\n\n      this.getData();\n    },\n\n  };\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n  svg {\n    margin: 25px;\n  }\n  path {\n    fill: none;\n    stroke: #76BF8A;\n    stroke-width: 3px;\n  }\n</style>\n"]}]}